1. XP(eXtreme Programming)
  1) 정의
    - 수시 발생하는 고객 요구사항에 유연하게 대처하기 위해 고객 참여와 개발 과정을 반복, 극대화
    → 개발 생산성 향상 도모
    - 키워드 : 짧고 반복적인 개발주기, 단순한 설계, 고객의 적극 참여, 소프트웨어 빠르게 개발

  2) 특징
    - 릴리즈의 기간을 짧게 반복하여 고객 요구사항 반영에 가시성을 높임.
      (+ 릴리즈 : 요구사항이 가시화되어 시제품과 같이 완성된 제품 제공하는 것)
    - 테스트 때마다 고객을 직접 참여시켜 요구한 기능이 정상 작동하는지 직접 확인 가능
    - 소규모 인원의 개발 프로젝트에 효과적
    - 애자일 개발 방법론에 기반

  3) XP의 5가지 핵심 가치
    - 의사소통, 단순성, 용기, 존중, 피드백



2. XP 개발 프로세스
  - 사용자 스토리 : 고객 요구사항을 시나리오로 표현. 기능 단위 구성. 필요 시 간단한 테스트 사항 기재
  - 릴리즈계획수립 : 단계별 부분적으로 완료할 기능들에 대하여 일정 수립
  - 스파이크 : 요구사항 신로성 향상 및 기술 위험 감소를 위해 만드는 간단한 프로그램
  - 이터레이션 : 릴리즈를 세분화한 단위. 1~3주 정도의 기간으로 진행. 새로운 스토리 작성될 가능성 있음.
                새롭게 작성된 스토리는 진행중이 이터레이션 혹은 다음 이터레이션에 포함됨.
  - 승인검사(인수테스트) : 계획한 부분이 완료되어 제품구현되면 수행하는 테스트.
                          고객이 직접 참여해 테스트 사항 수행
                          테스트 과정에서 발생한 오류는 다음 이터레이션에 포함함.
                          테스트 기반 새로운 요구사항 생길 시, 우선순위가 변경될 수 있음.
                          테스트 종료 시, 다음 이터레이션 실시.
  - 소규모 릴리즈 : 고객 반응을 기능별 확인 가능. 고객 요구사항에 유연하게 대응 용이.

  

3. XP의 주요 실천방법
  1) Pair Programming(짝 프로그래밍)
    - 다른 사람과 함께 프로그래밍 수행. 개발 책임의 공동성 지님.

  2) Collective Ownership(공동 코드 소유)
    - 개발 코드 권한과 책임을 공동으로 소유

  3) Test-Driven Development(테스트 주도 개발)
    - 실제 코드 작성 전 테스트 케이스 먼저 작성하여 수행해야 할 업무 명확히 파악
    - 테스트 지속할 수 있도록 자동화된 테스팅 도구 활용

  4) Whole Team(전체 팀)
    - 개발에 참여하는 모든 구성원은 본인의 역할이 각자 있으며 그에 대한 책임 필요

  5) Continuous Integration(계속적 통합)
    - 모듈 단위로 나눠 개발된 코드들은 작업이 종료될 때마다 다른 것들과 지속 통합함.

  6) Design Improvement(디자인개선) 혹은 Refactoring(리팩토링)
    - 프로그램 기능 변경 없이, 단순화, 유연성 강화 등 통해 시스템을 재구성함.

  7) Small Releases(소규모 릴리즈)
    - 릴리즈 기간 짧게 반복해 고객 요구사항 변화에 신속히 대응함

